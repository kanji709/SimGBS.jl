name: Test

on:
  push:
    branches: [master]
    tags: ["*"]
  pull_request:

jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1'      # latest stable 1.x (currently 1.10.x)
          - 'lts'    # explicit LTS alias
          - 'pre'    # prerelease (RC/beta/alpha)
        os:
          - ubuntu-latest
          - windows-latest
        arch:
          - x64
        include:
          - os: macOS-latest
            arch: aarch64
            version: '1'
    env:
      JULIA_DEPOT_PATH: ${{ github.workspace }}/.julia-depot
      JULIA_PKG_USE_CLI_GIT: 'true'
      JULIA_PKG_SERVER_REGISTRY_PREFERENCE: eager
      JULIA_PKG_SERVER: https://pkg.julialang.org
      JULIA_PKG_PRECOMPILE_AUTO: '0'
    continue-on-error: ${{ matrix.version == 'pre' }}
    steps:
      - uses: actions/checkout@v4

      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}

      - uses: julia-actions/cache@v2

      - name: Bootstrap core JLLs (fix OpenSSL_jll precompile)
        shell: bash
        run: |
          echo "‚öôÔ∏è Bootstrapping into depot: $JULIA_DEPOT_PATH"
          julia --color=yes -e '
            using Pkg
            Pkg.Registry.update()
            for pkg in ["OpenSSL_jll","LibGit2_jll","LibSSH2_jll","MbedTLS_jll","LibCURL_jll"]
              try
                println("Installing ", pkg)
                Pkg.add(pkg)
              catch err
                println("WARN: Could not install ", pkg, ": ", err)
              end
            end
            try
              Pkg.precompile()
            catch err
              println("WARN: Precompile after JLL bootstrap failed (will retry): ", err)
            end
          '

      - name: Instantiate and precompile (CLI git bootstrap)
        shell: bash
        run: |
          julia --color=yes -e '
            using Pkg
            println("üîß Using CLI git? ", get(ENV, "JULIA_PKG_USE_CLI_GIT", ""))
            Pkg.Registry.update()
            Pkg.instantiate()
            Pkg.precompile()
          '

      - name: Build
        shell: bash
        run: |
          julia --color=yes -e '
            using Pkg
            try
              Pkg.build(verbose=true)
            catch e
              println("WARN: Build failed once; retrying after registry refresh: ", e)
              Pkg.Registry.update()
              Pkg.instantiate()
              Pkg.build(verbose=true)
            end
          '

      - name: Run tests
        shell: bash
        run: |
          julia --color=yes -e '
            using Pkg
            Pkg.test(; coverage=true)
          '

      - uses: julia-actions/julia-processcoverage@v1

      - uses: codecov/codecov-action@v5
        with:
          file: lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}

  CompatHelper:
    name: CompatHelper
    runs-on: ubuntu-latest
    env:
      JULIA_DEPOT_PATH: ${{ github.workspace }}/.julia-depot
      JULIA_PKG_USE_CLI_GIT: 'true'
      JULIA_PKG_SERVER_REGISTRY_PREFERENCE: eager
      JULIA_PKG_SERVER: https://pkg.julialang.org
      JULIA_PKG_PRECOMPILE_AUTO: '0'
    steps:
      - name: Pkg.add("CompatHelper")
        run: julia -e 'using Pkg; Pkg.add("CompatHelper")'
      - name: CompatHelper.main()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: julia -e 'using CompatHelper; CompatHelper.main()'

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      JULIA_DEPOT_PATH: ${{ github.workspace }}/.julia-depot
      JULIA_PKG_USE_CLI_GIT: 'true'
      JULIA_PKG_SERVER_REGISTRY_PREFERENCE: eager
      JULIA_PKG_SERVER: https://pkg.julialang.org
      JULIA_PKG_PRECOMPILE_AUTO: '0'
      JULIA_NUM_THREADS: '2'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: julia-actions/setup-julia@v2
        with:
          version: '1.10'

      - uses: julia-actions/cache@v2

      - name: Bootstrap core JLLs
        run: |
          julia --color=yes -e '
            using Pkg
            Pkg.Registry.update()
            for pkg in ["OpenSSL_jll","LibGit2_jll","LibSSH2_jll","MbedTLS_jll","LibCURL_jll"]
              try Pkg.add(pkg) catch err
                println("WARN: Could not install ", pkg, ": ", err)
              end
            end
            try Pkg.precompile() catch err
              println("WARN: Precompile failed: ", err)
            end
          '

      - name: Install dependencies (docs env)
        run: |
          julia --project=docs/ --color=yes -e '
            using Pkg
            Pkg.Registry.update()
            Pkg.develop(PackageSpec(path=pwd()))
            Pkg.instantiate()
            Pkg.precompile()
          '

      - name: Build and deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
        run: julia --project=docs/ --color=yes docs/make.jl

  build:
    name: Formatter
    runs-on: ubuntu-latest
    env:
      JULIA_DEPOT_PATH: ${{ github.workspace }}/.julia-depot
      JULIA_PKG_USE_CLI_GIT: 'true'
      JULIA_PKG_SERVER_REGISTRY_PREFERENCE: eager
      JULIA_PKG_SERVER: https://pkg.julialang.org
      JULIA_PKG_PRECOMPILE_AUTO: '0'
    steps:
      - uses: actions/checkout@v4

      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'

      - uses: julia-actions/cache@v2

      - name: Prepare env
        run: |
          julia --color=yes -e '
            using Pkg
            Pkg.Registry.update()
            Pkg.add("JuliaFormatter")
            Pkg.precompile()
          '

      - name: Format
        run: |
          julia --color=yes -e '
            using JuliaFormatter
            format(".")
          '

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: Format .jl files
          title: 'Automatic JuliaFormatter.jl run'
          branch: auto-juliaformatter-pr
          base: master
          delete-branch: true
          labels: formatting, automated pr, no changelog

      - name: Check outputs
        run: |
          echo "Pull Request Number - ${{ steps.cpr.outputs['pull-request-number'] }}"
          echo "Pull Request URL - ${{ steps.cpr.outputs['pull-request-url'] }}"
