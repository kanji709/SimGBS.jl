name: Test

on:
  push:
    branches: [master]
    tags: ["*"]
  pull_request:

jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1'      # latest stable 1.x (currently 1.10.x)
          - 'lts'    # explicit LTS alias
          - 'pre'    # prerelease (RC/beta/alpha)
        os:
          - ubuntu-latest
          - windows-latest
        arch:
          - x64
        include:
          - os: macOS-latest
            arch: aarch64
            version: '1'
    # Key env vars to avoid LibGit2_jll during bootstrap and make registry ops reliable
    env:
      JULIA_PKG_USE_CLI_GIT: 'true'                     # use system git, not LibGit2_jll
      JULIA_PKG_SERVER_REGISTRY_PREFERENCE: eager
      JULIA_PKG_SERVER: https://pkg.julialang.org
    steps:
      - uses: actions/checkout@v4

      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}

      - uses: julia-actions/cache@v2

      - name: Bootstrap core JLLs (fix OpenSSL_jll precompile)
        shell: bash
        run: |
          echo "⚙️ Bootstrapping OpenSSL_jll and friends before Pkg loads..."
          julia --color=yes -e '
            import Downloads
            using Pkg
            Pkg.Registry.update()
            # Manually add minimal JLLs that Pkg depends on
            pkgs = ["OpenSSL_jll", "LibGit2_jll", "LibSSH2_jll", "MbedTLS_jll", "LibCURL_jll"]
            for pkg in pkgs
              try
                println("Installing ", pkg)
                Pkg.add(pkg)
              catch err
                @warn("Could not install $pkg", err)
              end
            end
            Pkg.precompile()
          '

      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1

      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v5
        with:
          file: lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}

    continue-on-error: ${{ matrix.version == 'pre' }}  # prerelease can fail without breaking the job

  CompatHelper:
    name: CompatHelper
    runs-on: ubuntu-latest
    steps:
      - name: Pkg.add("CompatHelper")
        run: julia -e 'using Pkg; Pkg.add("CompatHelper")'
      - name: CompatHelper.main()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: julia -e 'using CompatHelper; CompatHelper.main()'

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    permissions:
      contents: write   # needed for Documenter to push to gh-pages via GITHUB_TOKEN
    env:
      JULIA_PKG_USE_CLI_GIT: 'true'
      JULIA_PKG_SERVER_REGISTRY_PREFERENCE: eager
      JULIA_PKG_SERVER: https://pkg.julialang.org
      JULIA_NUM_THREADS: '2'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0   # Documenter likes full history for links/tags

      - uses: julia-actions/setup-julia@v2
        with:
          version: '1.10'  # LTS/stable for docs

      - uses: julia-actions/cache@v2
        with:
          cache-registries: "true"
          cache-packages: "true"
          cache-artifacts: "true"

      - name: Install dependencies (docs env)
        run: |
          julia --project=docs/ --color=yes -e '
            using Pkg
            Pkg.Registry.update()
            Pkg.develop(PackageSpec(path=pwd()))
            Pkg.instantiate()
            Pkg.precompile()
          '

      - name: Build and deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}   # HTTPS deploy with built-in token
          # DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }} # if you prefer SSH deploys
        run: julia --project=docs/ --color=yes docs/make.jl

  build:
    name: Formatter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install JuliaFormatter and format
        run: |
          julia -e 'using Pkg; Pkg.add("JuliaFormatter"); using JuliaFormatter; format(".")'
      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: Format .jl files
          title: 'Automatic JuliaFormatter.jl run'
          branch: auto-juliaformatter-pr
          base: master
          delete-branch: true
          labels: formatting, automated pr, no changelog
      - name: Check outputs
        run: |
          echo "Pull Request Number - ${{ steps.cpr.outputs['pull-request-number'] }}"
          echo "Pull Request URL - ${{ steps.cpr.outputs['pull-request-url'] }}"
